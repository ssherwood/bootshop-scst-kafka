##
## TODO - I'm still having occasional issues where the Brokers start too fast and fail with a
## `KeeperErrorCode = NodeExists`; while annoying this is easily remedied by just manually starting the failed
## Broker.
##
## You can also just do this in two commands:
##
## $ docker-compose up -d zookeeper
## <wait a few seconds>
## $ docker-compose up -d
##
---
version: "3"
services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - ${KAFKA_DATA}/zookeeper:/bitnami/zookeeper
  kafka1:
    image: 'bitnami/kafka:latest'
    ports:
      - "9192:9092"
    environment:
      - KAFKA_CFG_BROKER_ID=100
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://:9093,EXTERNAL://kafka1.test.local:9192
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ${KAFKA_DATA}/kafka1:/bitnami/kafka
    depends_on:
      - zookeeper
  kafka2:
    image: 'bitnami/kafka:latest'
    ports:
      - "9292:9092"
    environment:
      - KAFKA_CFG_BROKER_ID=200
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://:9093,EXTERNAL://kafka2.test.local:9292
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ${KAFKA_DATA}/kafka2:/bitnami/kafka
    depends_on:
      - zookeeper
  kafka3:
    image: 'bitnami/kafka:latest'
    ports:
      - "9392:9092"
    environment:
      - KAFKA_CFG_BROKER_ID=300
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://:9093,EXTERNAL://kafka3.test.local:9392
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ${KAFKA_DATA}/kafka3:/bitnami/kafka
    depends_on:
      - zookeeper

# see: vhttps://github.com/confluentinc/cp-all-in-one/blob/6.1.0-post/cp-all-in-one/docker-compose.yml
#  schema-registry:
#    image: confluentinc/cp-schema-registry:6.1.0
#    hostname: schema-registry
#    container_name: schema-registry
#    depends_on:
#      - broker
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
#      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

### TODO https://github.com/confluentinc/schema-registry-images
### https://hub.docker.com/r/confluentinc/cp-schema-registry
### Add Schema Registry: schema-registry:
        #    image: confluentinc/cp-schema-registry:5.0.0-beta30
        #    hostname: schema-registry
        #    container_name: schema-registry
        #    depends_on:
        #      - zookeeper
        #      - broker
        #    ports:
        #      - "8081:8081"
        #    environment:
      #      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      #      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'